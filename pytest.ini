[pytest]
# Pytest configuration for Wildfire Watch test suite
# Handles long timeouts for MQTT broker setup and integration tests

# Python path - ensure project root is in path
pythonpath = .

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Timeout settings - accommodate slow MQTT broker and infrastructure setup
timeout = 3600
timeout_method = thread
timeout_func_only = true
timeout_disable_debugger_detection = true
# Session timeout increased to 4 hours for E2E test sessions
session_timeout = 14400

# Output configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --timeout-disable-debugger-detection
    -W ignore::DeprecationWarning:paho.mqtt
    -W ignore::DeprecationWarning:onvif
    -W ignore::UserWarning:cv2
    --setup-show

# Logging configuration
log_level = INFO
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_date_format = %Y-%m-%d %H:%M:%S
log_auto_indent = true

# Test markers - define expected test categories
markers =
    slow: marks tests as slow (default timeout: 300s, runtime: 60s-5min)
    very_slow: marks tests as very slow (default timeout: 1800s, runtime: >5min)
    timeout: use @pytest.mark.timeout(seconds=X) for explicit timeout control
    integration: marks tests as integration tests (require external services)
    hardware: marks tests requiring hardware (Raspberry Pi, Coral TPU, etc.)
    network: marks tests requiring network access
    mqtt: marks tests requiring MQTT broker
    docker: marks tests requiring Docker
    coral: marks tests requiring Coral TPU hardware
    coral_tpu: marks tests requiring Coral TPU hardware (alias)
    gpu: marks tests requiring GPU hardware
    hailo: marks tests requiring Hailo AI accelerator
    api_usage: marks tests for API usage validation
    yolo_nas: marks tests for YOLO-NAS training/inference
    super_gradients: marks tests requiring super-gradients library
    qat: marks tests for quantization-aware training
    qat_functionality: marks tests for quantization-aware training (alias)
    int8: marks tests for INT8 model quantization
    int8_quantization: marks tests for INT8 model quantization (alias)
    frigate_integration: marks tests for Frigate NVR integration
    model_converter: marks tests for model format conversion
    model_conversion: marks tests for model format conversion (alias)
    hardware_integration: marks tests for hardware integration
    deployment: marks tests for production deployment
    security_nvr: marks tests for security NVR functionality
    timeout_expected: marks tests that are expected to have long timeouts
    infrastructure_dependent: marks tests that depend on slow infrastructure
    e2e: marks tests as end-to-end tests
    python38: marks tests requiring Python 3.8
    python310: marks tests requiring Python 3.10
    python312: marks tests requiring Python 3.12
    tflite_runtime: marks tests requiring TensorFlow Lite runtime
    benchmark: marks performance benchmark tests
    cameras: marks tests involving camera functionality
    stress: marks stress/load tests
    quick: marks tests as quick (should complete in <5 seconds)
    unit: marks tests as unit tests (no external dependencies)
    smoke: marks tests as smoke tests (basic functionality)
    tensorrt: marks tests requiring TensorRT GPU acceleration
    gpio: marks tests requiring GPIO hardware or simulation
    rpi_gpio: marks tests requiring Raspberry Pi GPIO
    requires_mqtt: marks tests requiring MQTT broker
    requires_docker: marks tests requiring Docker
    requires_camera: marks tests requiring camera hardware
    requires_network: marks tests requiring network access
    cpu_intensive: marks tests that are CPU intensive
    memory_intensive: marks tests that are memory intensive
    io_intensive: marks tests that are I/O intensive

# Minimum version
minversion = 6.0

# Required plugins
required_plugins = 
    pytest-timeout
    pytest-mock

# Filter warnings to reduce noise while preserving important ones
filterwarnings =
    ignore::DeprecationWarning:paho.mqtt.*
    ignore::DeprecationWarning:onvif.*
    ignore::UserWarning:cv2.*
    ignore::PendingDeprecationWarning:torch.*
    default::DeprecationWarning:camera_detector.*
    default::DeprecationWarning:fire_consensus.*
    default::DeprecationWarning:gpio_trigger.*
    default::UserWarning:tests.*
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*was never awaited:RuntimeWarning
    ignore:.*TripleDES.*:cryptography.utils.CryptographyDeprecationWarning
    ignore:.*Blowfish.*:cryptography.utils.CryptographyDeprecationWarning
    ignore::cryptography.utils.CryptographyDeprecationWarning:paramiko.*