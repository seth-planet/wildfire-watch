version: '3.8'

# Use .env to override PLATFORM, MQTT_BROKER, static IP, etc.
env_file:
  - .env

services:

  # -------------------------------------------------------------------
  # Local MQTT broker (Mosquitto) â€” anonymous + retained messages by default
  # Supports TLS, WebSockets, and cloud bridging via conf.d/*.conf (disabled by default)
  # -------------------------------------------------------------------
  mqtt_broker:
    build: ./mqtt_broker
    container_name: mqtt-broker
    hostname: mqtt-broker                     # advertises mqtt-broker.local via mDNS
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    ports:
      - "1883:1883"    # plain MQTT
      - "9001:9001"    # MQTT over WebSocket (enable in conf.d/websockets.conf)
      - "8883:8883"    # MQTT over TLS       (enable in conf.d/tls.conf)
    networks:
      lan_net:
        ipv4_address: ${MQTT_BROKER_STATIC_IP:-192.168.100.10}

  # -------------------------------------------------------------------
  # camera_detector: Hailo TPU + NVIDIA GPU + CPU fallback
  # -------------------------------------------------------------------
  camera_detector:
    build:
      context: ./camera_detector
      args:
        - PLATFORM=${PLATFORM:-linux/amd64}
    container_name: camera-detector
    hostname: camera-detector                 # camera-detector.local
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    devices:
      - "/dev/hailo0:/dev/hailo0"              # Hailo M.2 PCIe TPU
    device_requests:                          # NVIDIA GPU inference
      - driver: nvidia
        count: 1
        capabilities: ["gpu"]
    environment:
      - RTSP_STREAM_URL=${RTSP_STREAM_URL}
      - MQTT_BROKER=${MQTT_BROKER:-mqtt-broker.local}
      - DETECTOR=${DETECTOR}
      - MODEL_PATH=${MODEL_PATH}
    volumes:
      - ./camera_detector/model:/app/model
      - shared:/app/shared
    networks:
      - lan_net

  # -------------------------------------------------------------------
  # cam_telemetry: system health + config heartbeats
  # -------------------------------------------------------------------
  cam_telemetry:
    build: ./cam_telemetry
    container_name: cam-telemetry
    hostname: cam-telemetry
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    environment:
      - MQTT_BROKER=${MQTT_BROKER:-mqtt-broker.local}
      - CAMERA_ID=${HOSTNAME}
      - TELEMETRY_INTERVAL=${TELEMETRY_INTERVAL}
    volumes:
      - shared:/app/shared
    networks:
      - lan_net

  # -------------------------------------------------------------------
  # fire_consensus: multi-camera consensus + trigger publication
  # -------------------------------------------------------------------
  fire_consensus:
    build: ./fire_consensus
    container_name: fire-consensus
    hostname: fire-consensus
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    environment:
      - MQTT_BROKER=${MQTT_BROKER:-mqtt-broker.local}
      - CAMERA_WINDOW=${CAMERA_WINDOW}
      - CAMERA_THRESHOLD=${CAMERA_THRESHOLD}
    volumes:
      - shared:/app/shared
    networks:
      - lan_net

  # -------------------------------------------------------------------
  # gpio_trigger: valve + ignition control (simulated on non-Pi)
  # -------------------------------------------------------------------
  gpio_trigger:
    build: ./gpio_trigger
    container_name: gpio-trigger
    hostname: gpio-trigger
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    privileged: true
    devices:
      - "/dev/gpiomem:/dev/gpiomem"            # Pi GPIO (simulated/no-op on x86)
    environment:
      - MQTT_BROKER=${MQTT_BROKER:-mqtt-broker.local}
      - RELAY_GPIO_PIN=${RELAY_GPIO_PIN}
    volumes:
      - shared:/app/shared
    networks:
      - lan_net

  # -------------------------------------------------------------------
  # Frigate NVR: hardware decode + Hailo & NVIDIA GPU support
  # -------------------------------------------------------------------
  frigate:
    image: blakeblackshear/frigate:stable
    container_name: frigate
    hostname: frigate
    platform: ${PLATFORM:-linux/amd64}
    restart: unless-stopped
    privileged: true
    devices:
      - "/dev/dri:/dev/dri"                   # Intel/AMD VAAPI decode
      - "/dev/hailo0:/dev/hailo0"             # allow Hailo TPU if attached
    device_requests:
      - driver: nvidia                        # NVIDIA GPU inference
        count: 1
        capabilities: ["gpu"]
    environment:
      - FRIGATE_DETECTOR=${DETECTOR}
      - RTSP_AUTO=true
      - MQTT_HOST=${MQTT_BROKER:-mqtt-broker.local}
      - LIBVA_DRIVER_NAME=${LIBVA_DRIVER_NAME}
      - MODEL_PATH=${MODEL_PATH}
    ports:
      - "5000:5000"   # Frigate Web UI
      - "8554:8554"   # RTSP proxy
    volumes:
      - frigate_recordings:/media/frigate
      - ./security_nvr/config.yml:/config/config.yml:ro
    networks:
      - lan_net

volumes:
  shared:
  frigate_recordings:

networks:
  lan_net:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-192.168.100.0/24}
